# Build and deploy website - builds on PRs, deploys on main branch
name: Build and Deploy

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs every hour
  schedule:
    - cron: '*/10 * * * *'

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: write
  # Additional permissions only needed for deployment
  pages: write
  id-token: write
  # Additional permissions for PR preview deployments
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# PRs can run concurrently since they don't deploy
concurrency:
  group: ${{ github.event_name == 'pull_request' && format('build-pr-{0}', github.event.number) || 'pages' }}
  cancel-in-progress: false

jobs:
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      changes_detected: ${{ steps.check.outputs.changes_detected }}
    env:
      GCS_BUCKET: ukulele-tuesday-songbooks
    steps:
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Disable gcloud authentication
        run: gcloud config set auth/disable_credentials True

      - name: Decide whether to build
        id: check
        run: |
          set -x
          if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Build triggered by push or manual dispatch. Proceeding."
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For schedule and PR events, run the full validation logic
          echo "Build triggered by schedule or PR. Checking for recent changes in GCS."
          CUTOFF_TIME=$(date -u -d '15 minutes ago' +%s)
          GCS_PATH="gs://${GCS_BUCKET}/"

          GCS_LIST_JSON=$(gcloud storage ls "$GCS_PATH**" --json)
          if [[ $? -ne 0 ]]; then
              echo "::error::'gcloud storage ls' command failed."
              exit 1
          fi

          LAST_UPDATED_STR=$(echo "$GCS_LIST_JSON" | jq -r '.[].metadata.updated' | sort -r | head -n 1)
          if [[ -z "$LAST_UPDATED_STR" || "$LAST_UPDATED_STR" == "null" ]]; then
            echo "No files found in GCS bucket. No changes detected."
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          LAST_UPDATED_TS=$(date -u -d "$LAST_UPDATED_STR" +%s)
          if [[ $? -ne 0 ]]; then
            echo "::error::Failed to parse timestamp '$LAST_UPDATED_STR'."
            exit 1
          fi

          if [[ "$LAST_UPDATED_TS" -gt "$CUTOFF_TIME" ]]; then
            echo "Found recent changes. Last update at $LAST_UPDATED_STR. Proceeding."
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "No recent changes detected. Last update at $LAST_UPDATED_STR. Skipping deployment."
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi
          
          # Handle pull request check at the end to ensure all script validation runs
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Build triggered by pull request. Always proceeding for PR validation."
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            exit 0
          fi

  # Build job - runs on all triggers including PRs
  build:
    if: needs.check-for-changes.outputs.changes_detected == 'true'
    needs: check-for-changes
    runs-on: ubuntu-latest
    env:
      GCS_BUCKET: ukulele-tuesday-songbooks
      BUYMEACOFFEE_API_TOKEN: ${{ secrets.BUYMEACOFFEE_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v1

      - name: Install dependencies
        run: uv sync

      - name: Generate website
        run: uv run build.py

      - name: Upload build artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event_name == 'pull_request' && 'generated-site' || 'github-pages' }}
          path: 'public'
          retention-days: ${{ github.event_name == 'pull_request' && '1' || '30' }}

  # Deploy job - deploys to main branch or creates PR preview
  deploy:
    if: needs.build.result == 'success'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event_name == 'pull_request' && 'generated-site' || 'github-pages' }}
          path: public

      - name: Deploy to GitHub Pages (main branch only)
        if: github.event_name != 'pull_request'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: public
          clean-exclude: pr-preview/

      - name: Deploy PR Preview (PRs only)
        if: github.event_name == 'pull_request'
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: public
